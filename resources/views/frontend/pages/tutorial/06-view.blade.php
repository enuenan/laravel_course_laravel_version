@extends('frontend.layouts.default',[
'title'=>'View',
'currentClass'=>'view',
'keywords'=>'Views',
'description'=>'Laravel Views',
])

@section('content')
    <h3>Views</h3>
    <p>
        By default, Laravel views are built using the <a href="https://laravel.com/docs/8.x/blade">Blade</a>
        template language, and stored in the <span class="path">/resources/views/</span> folder. We can create
        our view files there. Rules to create a view file is <span class="path">filename.blade.php</span>
    </p>

    <h3>Displaying data</h3>
    <p style="text-align: justify">
        Blade uses the double curly brackets <span class="path"> &#123;&#123; expression &#125;&#125; </span> to echo
        information
        to the PHP output. By default, all the content generated by blade expressions is automatically
        encoded/escaped to prevent XSS attacks (using raw HTML to break your code). You can use any valid PHP
        variable, expression, or function call as an expression:
    </p>
    <pre>
        <code>
            &#60;div&#62;Number of items: &#123;&#123; count($items) &#125;&#125;.&#60;/div&#62;
        </code>
    </pre>

    <h3>Blade Directives</h3>
    <p>Laravel Blade directives help to build complex views using programmatic logic found in most programming
        languages. The most common directives are:</p>

    <h4>Condition <span class="path">&#64;if</span> directive</h4>
    <p>Is the common way to conditionally display a block based on conditions:</p>
    <pre>
        <code>
    &#64;if (count($results) === 1)
        &#60;span&#62;1 result&#60;/span&#62;
    &#64;elseif (count($results) > 1)
        &#60;span&#62;&#123;&#123; count($results) &#125;&#125; results&#60;/span&#62;
    &#64;else
        &#60;span&#62;No results&#60;/span&#62;
    &#64;endif
        </code>
    </pre>

    <h4><span class="path">&#64;isset</span> and <span class="path">&#64;empty</span> directives</h4>
    <p>&#64;isset checks if a variable is defined and not null. On the other hand, &#64;empty checks if the variable has
        an ’empty’ value: null, false, '', [] empty array and others (see empty())</p>
    <pre>
        <code>
    &#64;isset($errorMessage)
        &#60;span class='error-message'&#62; &#123;&#123; $errorMessage &#125;&#125; &#60;/span&#62;
    &#64;endisset

    &#64;empty($records)
        &#60;span&#62; No matches found &#60;/span&#62;
    &#64;endempty
        </code>
    </pre>

    <h4>Loop directives</h4>
    <p>You can loop over data using <span class="path"> &#64;for</span> <span class="path"> &#64;foreach</span> <span
            class="path">
            &#64;forelse</span> and <span class="path"> &#64;while</span> </p>
    <pre>
        <code>
    // regular for
    &#64;for ($i = 0; $i < count($results); $i++) 
        &#60;div&#62; Name: &#123;&#123; $results[$i]['firstName'] &#125;&#125;&#60;/div&#62;
    &#64;endfor

    // for each element of a list
    &#64;foreach ($results as $result)
        &#60;div&#62; Name: &#123;&#123; $result['firstName'] &#125;&#125;&#60;/div&#62;
    &#64;endforeach

    // for each element, fallback if empty
    &#64;forelse ($results as $result)
        &#60;div&#62;&#123;&#123; $result['firstName'] &#125;&#125;&#60;/div&#62;
    &#64;empty
        &#60;div&#62; No results &#60;/div&#62;
    &#64;endforelse

    // loop while a condition is true
    &#64;while ($dataSource->hasData())
        &#60;div&#62;&#123;&#123; $dataSource->data['id'] &#125;&#125;&#60;/div&#62;
    &#64;endwhile
        </code>
    </pre>
    <p>
        As in regular loops, you can use the <span class="path">&#64;break</span> to stop the loop, and
        <span class="path">&#64;continue</span> directive to skip/pass the current loop. Also, you can check the value
        of $loop->index (0-based) attribute to get the current loop
        index or $loop->iteration (1-based) to get the current loop count (see more options in the <a
            href="https://laravel.com/docs/8.x/blade#the-loop-variable">Laravel Blade
            documentation</a> ).
    </p>

    <h4>Adding sub-views using <span class="path">&#64;include</span></h4>
    <p>
        You can include other sub-views inside a blade template using &#64;include( view, parameters). For example,
        you can create your views using a mix of local content and reuse of common components (the same
        header/footer for each page, for example):
    </p>
    <pre>
        <code>
    &#60;!DOCTYPE html&#62;
    &#60;html lang="&#123;&#123; str_replace('_', '-', app()->getLocale()) &#125;&#125;"&#62;
    &#64;include('head',['title'=>'My Page'])

    &#60;body>
        &#64;include('components/toolbar')
        &#60;div id="content"&#62;
            My content ...
        &#60;/div&#62;
        &#64;include('components/footer')
    &#60;/body&#62;

    &#60;/html&#62;
        </code>
    </pre>
    <p>You will know about this chapter sub-views later on <a href="08-layout.html">Layout</a> chapter.</p>

    <lottie-player src="https://assets3.lottiefiles.com/packages/lf20_phd2cebr.json" background="transparent" speed="0.5"
        loop autoplay></lottie-player>

@endsection
